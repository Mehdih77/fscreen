{"version":3,"sources":["stitches.config.ts","ui/Button.tsx","ui/DarkModeButton.tsx","ui/GitHubIconLink.tsx","ui/Link.tsx","App.tsx","index.tsx"],"names":["stitchesConfig","createCss","theme","colors","pageBackground","backgroundContrast","highContrast","lowContrast","red","orange","yellow","green","blue","purple","fonts","mono","styled","keyframes","global","createGlobalCss","darkThemeClass","globalCss","all","margin","border","padding","boxSizing","font","fontWeight","textDecoration","textAlign","lineHeight","wordBreak","color","background","outline","WebkitTapHighlightColor","body","fontFamily","WebkitFontSmoothing","MozOsxFontSmoothing","fontSize","textSizeAdjust","code","height","backgroundColor","Button","Interactive","borderColor","opacity","variants","focus","outlineOffset","boxShadow","boxShadowOffset","defaultVariants","DarkModeButton","css","props","storageProvider","localStorage","darkMode","useDarkMode","undefined","classNameDark","React","value","document","documentElement","style","colorScheme","onClick","toggle","width","borderRadius","title","aria-label","GitHubIconLink","newWindow","as","A","target","rel","display","transform","StyledLink","textDecorationLine","textDecorationStyle","textDecorationColor","textDecorationThickness","Link","AppContainer","minHeight","alignItems","justifyContent","ContentContainer","maxWidth","HeaderContainer","marginBottom","H1","marginRight","HeaderIconContainer","gap","InfoContainer","Status","Bool","bool","true","false","FullscreenButton","marginTop","App","inFullscreenMode","setInFullscreenMode","handleFullscreenChange","e","change","fscreen","fullscreenElement","console","log","handleFullscreenError","fullscreenEnabled","addEventListener","removeEventListener","appElement","toggleFullscreen","exitFullscreen","requestFullscreen","current","ref","href","disabled","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.cd1949e2.chunk.js","sourcesContent":["import { createCss, StitchesCss } from '@stitches/react';\n\nexport const stitchesConfig = createCss({\n  theme: {\n    colors: {\n      pageBackground: 'rgb(240,240,240)',\n      backgroundContrast: 'rgb(216,216,216)',\n      highContrast: 'rgb(0,0,0)',\n      lowContrast: 'rgb(128,128,128)',\n      red: 'hsl(0,100%,50%)',\n      orange: 'hsl(30,100%,50%)',\n      yellow: 'hsl(51,100%,40%)',\n      green: 'hsl(120,100%,33%)', // same as rgb(0,168,0)\n      blue: 'hsl(240,100%,50%)',\n      purple: 'hsl(270,100%,60%)',\n    },\n    fonts: {\n      mono: 'menlo, monospace',\n    },\n  },\n});\n\nexport type CSS = StitchesCss<typeof stitchesConfig>;\n\nexport const {\n  styled,\n  theme,\n  keyframes,\n  global: createGlobalCss,\n} = stitchesConfig;\n\nexport const darkThemeClass = theme({\n  colors: {\n    pageBackground: 'rgb(32,32,32)',\n    backgroundContrast: 'rgb(64,64,64)',\n    highContrast: 'rgb(192,192,192)',\n    lowContrast: 'rgb(136,136,136)',\n    red: 'hsl(0,100%,50%)',\n    orange: 'hsl(30,90%,50%)',\n    yellow: 'hsl(60,88%,50%)',\n    green: 'hsl(120,85%,42%)',\n    blue: 'hsl(210,100%,60%)',\n    purple: 'hsl(270,85%,60%)',\n  },\n});\n\nexport const globalCss = createGlobalCss({\n  // unset all styles on interactive elements\n  'button, input, select, textarea, a, area': {\n    all: 'unset',\n  },\n  // normalize behavior on all elements\n  '*, *::before, *::after, button, input, select, textarea, a, area': {\n    margin: 0,\n    border: 0,\n    padding: 0,\n    boxSizing: 'inherit',\n    font: 'inherit',\n    fontWeight: 'inherit',\n    textDecoration: 'inherit',\n    textAlign: 'inherit',\n    lineHeight: 'inherit',\n    wordBreak: 'inherit',\n    color: 'inherit',\n    background: 'transparent',\n    outline: 'none',\n    WebkitTapHighlightColor: 'transparent',\n  },\n  // set base styles for the app\n  body: {\n    color: '$highContrast',\n    fontFamily: 'system-ui, Helvetica Neue, sans-serif',\n    // use word-break instead of \"overflow-wrap: anywhere\" because of Safari support\n    wordBreak: 'break-word',\n    WebkitFontSmoothing: 'antialiased',\n    MozOsxFontSmoothing: 'grayscale',\n    fontSize: '16px',\n    boxSizing: 'border-box',\n    textSizeAdjust: 'none',\n  },\n  code: {\n    fontFamily: '$mono',\n  },\n  // pass down height: 100% to the #root div\n  'body, html': {\n    height: '100%',\n  },\n  '#root': {\n    height: '100%',\n    backgroundColor: '$pageBackground',\n  },\n});\n","import { Interactive } from 'react-interactive';\nimport { styled } from '../stitches.config';\n\nexport const Button = styled(Interactive.Button, {\n  color: '$highContrast',\n  '&.hover, &.active': {\n    color: '$green',\n    borderColor: '$green',\n  },\n  '&.disabled': {\n    opacity: 0.5,\n  },\n  variants: {\n    focus: {\n      outline: {\n        '&.focusFromKey': {\n          outline: '2px solid $colors$purple',\n          outlineOffset: '2px',\n        },\n      },\n      boxShadow: {\n        '&.focusFromKey': {\n          boxShadow: '0 0 0 2px $colors$purple',\n        },\n      },\n      boxShadowOffset: {\n        '&.focusFromKey': {\n          boxShadow:\n            '0 0 0 2px $colors$pageBackground, 0 0 0 4px $colors$purple',\n        },\n      },\n    },\n  },\n  defaultVariants: {\n    focus: 'boxShadowOffset',\n  },\n});\n","import * as React from 'react';\nimport { SunIcon } from '@radix-ui/react-icons';\nimport useDarkMode from 'use-dark-mode';\nimport { Button } from './Button';\nimport { darkThemeClass } from '../stitches.config';\n\ninterface DarkModeButtonProps {\n  css?: React.ComponentProps<typeof Button>['css'];\n}\n\nexport const DarkModeButton: React.VFC<DarkModeButtonProps> = ({\n  css,\n  ...props\n}) => {\n  // put a try catch around localStorage so this app will work in codesandbox\n  // when the user blocks third party cookies in chrome,\n  // which results in a security error when useDarkMode tries to access localStorage\n  // see https://github.com/codesandbox/codesandbox-client/issues/5397\n  let storageProvider: any = null;\n  try {\n    storageProvider = localStorage;\n  } catch {}\n  const darkMode = useDarkMode(undefined, {\n    classNameDark: darkThemeClass,\n    storageProvider,\n  });\n\n  // add color-scheme style to <html> element\n  // so document scroll bars will have native dark mode styling\n  React.useEffect(() => {\n    if (darkMode.value === true) {\n      // @ts-ignore because colorScheme type not added yet\n      document.documentElement.style.colorScheme = 'dark';\n    } else {\n      // @ts-ignore\n      document.documentElement.style.colorScheme = 'light';\n    }\n  }, [darkMode.value]);\n\n  return (\n    <Button\n      {...props}\n      onClick={darkMode.toggle}\n      focus=\"boxShadow\"\n      css={{\n        width: '36px',\n        height: '36px',\n        padding: '3px',\n        margin: '-3px',\n        borderRadius: '50%',\n        // cast as any b/c of Stitches bug: https://github.com/modulz/stitches/issues/407\n        ...(css as any),\n      }}\n      title=\"Toggle dark mode\"\n      aria-label=\"Toggle dark mode\"\n    >\n      <SunIcon width=\"30\" height=\"30\" />\n    </Button>\n  );\n};\n","import * as React from 'react';\nimport { Interactive } from 'react-interactive';\nimport { GitHubLogoIcon } from '@radix-ui/react-icons';\nimport { Button } from './Button';\n\ninterface GitHubIconLinkProps {\n  href?: string;\n  title?: string;\n  newWindow?: boolean;\n  css?: React.ComponentProps<typeof Button>['css'];\n}\n\nexport const GitHubIconLink: React.VFC<GitHubIconLinkProps> = ({\n  newWindow = true,\n  css,\n  title,\n  ...props\n}) => (\n  <Button\n    {...props}\n    as={Interactive.A}\n    title={title}\n    aria-label={title}\n    target={newWindow ? '_blank' : undefined}\n    rel={newWindow ? 'noopener noreferrer' : undefined}\n    focus=\"boxShadow\"\n    css={{\n      display: 'inline-block',\n      width: '36px',\n      height: '36px',\n      padding: '3px',\n      margin: '-3px',\n      borderRadius: '50%',\n      // cast as any b/c of Stitches bug: https://github.com/modulz/stitches/issues/407\n      ...(css as any),\n    }}\n  >\n    <GitHubLogoIcon\n      width=\"30\"\n      height=\"30\"\n      // scale up the svg icon because it doesn't fill the view box\n      // see: https://github.com/radix-ui/icons/issues/73\n      style={{ transform: 'scale(1.1278)' }}\n    />\n  </Button>\n);\n","import * as React from 'react';\nimport { Interactive } from 'react-interactive';\nimport { styled } from '../stitches.config';\n\nconst StyledLink = styled(Interactive.A, {\n  color: '$highContrast',\n  textDecorationLine: 'underline',\n  textDecorationStyle: 'dotted',\n  textDecorationColor: '$green',\n  textDecorationThickness: 'from-font',\n  padding: '2px 3px',\n  margin: '-2px -3px',\n  borderRadius: '3px',\n  '&.hover': {\n    textDecorationColor: '$green',\n    textDecorationStyle: 'solid',\n  },\n  '&.active': {\n    textDecorationColor: '$green',\n    textDecorationStyle: 'solid',\n    color: '$green',\n  },\n  '&.focusFromKey': {\n    boxShadow: '0 0 0 2px $colors$purple',\n  },\n});\n\ninterface LinkProps extends React.ComponentPropsWithoutRef<typeof StyledLink> {\n  newWindow?: boolean;\n}\n\nexport const Link: React.VFC<LinkProps> = ({ newWindow = true, ...props }) => (\n  <StyledLink\n    {...props}\n    target={newWindow ? '_blank' : undefined}\n    rel={newWindow ? 'noopener noreferrer' : undefined}\n  />\n);\n","import * as React from 'react';\nimport fscreen from 'fscreen';\nimport { DarkModeButton } from './ui/DarkModeButton';\nimport { GitHubIconLink } from './ui/GitHubIconLink';\nimport { Link } from './ui/Link';\nimport { Button } from './ui/Button';\nimport { styled, globalCss } from './stitches.config';\n\nconst AppContainer = styled('div', {\n  minHeight: '100%',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  backgroundColor: '$pageBackground',\n});\n\nconst ContentContainer = styled('div', {\n  maxWidth: '300px',\n  margin: '0px 15px 6vh',\n});\n\nconst HeaderContainer = styled('header', {\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginBottom: '18px',\n});\n\nconst H1 = styled('h1', {\n  fontSize: '26px',\n  marginRight: '16px',\n});\n\nconst HeaderIconContainer = styled('span', {\n  width: '78px',\n  display: 'inline-flex',\n  justifyContent: 'space-between',\n  gap: '12px',\n});\n\nconst InfoContainer = styled('p', {\n  fontSize: '14px',\n  margin: '18px 0',\n});\n\nconst Status = styled('p', {\n  margin: '6px 0',\n});\n\nconst Bool = styled('code', {\n  variants: {\n    bool: {\n      true: {\n        color: '$green',\n      },\n      false: {\n        color: '$red',\n      },\n    },\n  },\n});\n\nconst FullscreenButton = styled(Button, {\n  display: 'block',\n  fontSize: '18px',\n  border: '2px solid',\n  borderRadius: '6px',\n  width: '100%',\n  padding: '14px',\n  textAlign: 'center',\n  marginTop: '36px',\n});\n\nexport const App = () => {\n  globalCss();\n\n  const [inFullscreenMode, setInFullscreenMode] = React.useState(false);\n\n  const handleFullscreenChange = React.useCallback((e) => {\n    let change = '';\n    if (fscreen.fullscreenElement !== null) {\n      change = 'Entered fullscreen mode';\n      setInFullscreenMode(true);\n    } else {\n      change = 'Exited fullscreen mode';\n      setInFullscreenMode(false);\n    }\n    console.log(change, e);\n  }, []);\n\n  const handleFullscreenError = React.useCallback((e) => {\n    console.log('Fullscreen Error', e);\n  }, []);\n\n  React.useEffect(() => {\n    if (fscreen.fullscreenEnabled) {\n      fscreen.addEventListener(\n        'fullscreenchange',\n        handleFullscreenChange,\n        false,\n      );\n      fscreen.addEventListener('fullscreenerror', handleFullscreenError, false);\n      return () => {\n        fscreen.removeEventListener('fullscreenchange', handleFullscreenChange);\n        fscreen.removeEventListener('fullscreenerror', handleFullscreenError);\n      };\n    }\n  });\n\n  const appElement = React.useRef<HTMLDivElement>(null!);\n\n  const toggleFullscreen = React.useCallback(() => {\n    if (inFullscreenMode) {\n      fscreen.exitFullscreen();\n    } else {\n      fscreen.requestFullscreen(appElement.current);\n    }\n  }, [inFullscreenMode]);\n\n  return (\n    <AppContainer ref={appElement}>\n      <ContentContainer>\n        <HeaderContainer>\n          <H1>Fscreen Demo</H1>\n          <HeaderIconContainer>\n            <DarkModeButton />\n            <GitHubIconLink\n              title=\"GitHub repository for Fscreen\"\n              href=\"https://github.com/rafgraph/fscreen\"\n            />\n          </HeaderIconContainer>\n        </HeaderContainer>\n        <InfoContainer>\n          Vendor agnostic access to the{' '}\n          <Link href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\">\n            Fullscreen API\n          </Link>\n        </InfoContainer>\n\n        <Status>\n          Fullscreen enabled:{' '}\n          <Bool\n            bool={fscreen.fullscreenEnabled}\n          >{`${fscreen.fullscreenEnabled}`}</Bool>\n        </Status>\n        <Status>\n          Currently in fullscreen mode:{' '}\n          <Bool bool={inFullscreenMode}>{`${inFullscreenMode}`}</Bool>\n        </Status>\n\n        <FullscreenButton\n          onClick={toggleFullscreen}\n          disabled={!fscreen.fullscreenEnabled}\n        >\n          {(!fscreen.fullscreenEnabled && 'Fullscreen Is Not Available') ||\n            (inFullscreenMode && 'Exit Fullscreen Mode') ||\n            'Enter Fullscreen Mode'}\n        </FullscreenButton>\n      </ContentContainer>\n    </AppContainer>\n  );\n};\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}